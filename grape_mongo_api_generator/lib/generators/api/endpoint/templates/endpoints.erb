class <%=api_namespace%>::<%=api_class_name%> < Grape::API
  helpers <%=api_namespace%>::Assistants::SharedParams
  helpers <%=api_namespace%>::Assistants::SerializationAssistant

  helpers do
    def model_params
      parameters = ActionController::Parameters.new(params)
      parameters.permit(<%=permit_params%>)
    end
  end

  # NOTE: get skip_filter: :authenticate do # skip auth
  # NOTE: oauth scopes scopes: :public or [:public, :write]

  resource :<%=file_name.pluralize%> do
<% if make_action?('index') %>
    describe 'Fetch <%=human_name%> collection',
      detail: '<%=human_name%>',
      params: <%=app_api_name.camelize%>::API::V1::Entities::SharedParams.documentation,
      success: <%=entity_collection_name%>,
      failure: [[400, 'Bad Request'], [401, 'Unauthorized'], [403, 'Forbidden']],
      named: 'Get<%=class_name%>Collection'
    get scopes: :public do
      authorize!(<%=class_name%>, :index?)
      present apply_policy_filter(<%=class_name%>), with: <%=entity_collection_name%>
    end
<%end%><% if make_action?('new') %>
    describe 'Return an empty object for creating <%=human_name%>',
      detail '<%=human_name%>',
      failure [[400, 'Bad Request'], [401, 'Unauthorized']],
      named 'Get<%=class_name%>New'
    get '/new', scopes: :public do
      authorize!(<%=class_name%>, :new?)
      present <%=class_name%>.new, with: <%=entity_name%>::Response
    end
<%end%><% if make_action?('create') %>
    describe 'Create <%=human_name%>',
      detail: '<%=human_name%>',
      params: <%=entity_name%>::Request.documentation,
      success: <%=entity_name%>::Response,
      failure: [[400, 'Bad Request'], [401, 'Unauthorized'], [403, 'Forbidden']],
      named: 'Post<%=class_name%>'
    post scopes: :public do
      item = <%=class_name%>.new(model_params)<%children_objects.each do |x|%>
      <%=x%><%end%>
      authorize!(item, :create?)
      item.save!
      present item, with: <%=entity_name%>::Response
    end
<%end%><% if make_action?('show') %>
    route_param :id do
      describe 'Fetch <%=human_name%> by id',
        detail: '<%=human_name%>',
        success: <%=entity_name%>::Response,
        failure: [[401, 'Unauthorized'], [403, 'Forbidden'], [404, 'Not Found']],
        named: 'Get<%=class_name%>ById'
      get scopes: :public do
        item = <%=class_name%>.fetch(params[:id])
        authorize!(item, :show?)
        present item, with: <%=entity_name%>::Response
      end
<%end%><% if make_action?('edit') %>
      describe 'Return an object for editing <%=human_name%>',
        detail: '<%=human_name%>',
        failure: [[401, 'Unauthorized'], [404, 'Not Found']],
        named: 'Put<%=class_name%>'
      get '/edit', scopes: :public do
        item = <%=class_name%>.fetch(params[:id])
        authorize!(item, :edit?)
        item.update_attributes(model_params)
        present item, with: <%=entity_name%>::Response
      end
<%end%><% if make_action?('update') %>
      describe 'Update <%=human_name%> by id',
        detail: '<%=human_name%>',
        params: <%=entity_name%>::Request.documentation,
        success: <%=entity_name%>::Response,
        failure: [[400, 'Bad Request'], [401, 'Unauthorized'], [403, 'Forbidden'], [404, 'Not Found']],
        named: 'Put<%=class_name%>'
      put scopes: :public do
        item = <%=class_name%>.fetch(params[:id])
        authorize!(item, :update?)
        item.update_attributes(model_params)<%children_objects.each do |x|%>
        <%=x%><%end%>
        item.save!
        present item, with: <%=entity_name%>::Response
      end
<%end%><% if make_action?('destroy') %>
      describe 'Delete <%=human_name%> by id',
        detail: '<%=human_name%>',
        failure: [[401, 'Unauthorized'], [403, 'Forbidden'], [404, 'Not Found']],
        named: 'Delete<%=class_name%>'
      delete scopes: :public do
        item = <%=class_name%>.fetch(params[:id])
        authorize!(item, :destroy?)
        item.destroy
      end
<%end%>
    end
  end
end
